// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories.Models;

#nullable disable

namespace Repositories.Migrations
{
    [DbContext(typeof(SealDbContext))]
    [Migration("20250912070328_AddRefreshTokenToUser")]
    partial class AddRefreshTokenToUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Repositories.Models.AuditLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("LogId")
                        .HasName("PK__AuditLog__5E5499A88B2190AC");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Repositories.Models.Chapter", b =>
                {
                    b.Property<int>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ChapterID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChapterId"));

                    b.Property<string>("ChapterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LeaderId")
                        .HasColumnType("int")
                        .HasColumnName("LeaderID");

                    b.HasKey("ChapterId")
                        .HasName("PK__Chapters__0893A34A6DB27A5A");

                    b.HasIndex("LeaderId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("Repositories.Models.Criterion", b =>
                {
                    b.Property<int>("CriteriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CriteriaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CriteriaId"));

                    b.Property<int?>("HackathonId")
                        .HasColumnType("int")
                        .HasColumnName("HackathonID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("CriteriaId")
                        .HasName("PK__Criteria__FE6ADB2DD6CC5237");

                    b.HasIndex("HackathonId");

                    b.ToTable("Criteria");
                });

            modelBuilder.Entity("Repositories.Models.Hackathon", b =>
                {
                    b.Property<int>("HackathonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HackathonID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HackathonId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Season")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Theme")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("HackathonId")
                        .HasName("PK__Hackatho__A9C9EEEB230112AC");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Hackathons");
                });

            modelBuilder.Entity("Repositories.Models.HackathonPhase", b =>
                {
                    b.Property<int>("PhaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhaseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhaseId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("HackathonId")
                        .HasColumnType("int")
                        .HasColumnName("HackathonID");

                    b.Property<string>("PhaseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("PhaseId")
                        .HasName("PK__Hackatho__5BA26D42DAB2AC98");

                    b.HasIndex("HackathonId");

                    b.ToTable("HackathonPhases");
                });

            modelBuilder.Entity("Repositories.Models.Leaderboard", b =>
                {
                    b.Property<int>("HackathonId")
                        .HasColumnType("int")
                        .HasColumnName("HackathonID");

                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("TeamID");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("TotalScore")
                        .HasColumnType("decimal(38, 2)");

                    b.ToTable((string)null);

                    b.ToView("Leaderboard", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.MentorAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AssignmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"));

                    b.Property<DateTime?>("AssignedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int")
                        .HasColumnName("ChapterID");

                    b.Property<int?>("MentorId")
                        .HasColumnType("int")
                        .HasColumnName("MentorID");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("TeamID");

                    b.HasKey("AssignmentId")
                        .HasName("PK__MentorAs__32499E570D49BF4A");

                    b.HasIndex("ChapterId");

                    b.HasIndex("MentorId");

                    b.HasIndex("TeamId");

                    b.ToTable("MentorAssignments");
                });

            modelBuilder.Entity("Repositories.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__20CF2E32A811D042");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Repositories.Models.PenaltiesBonuse", b =>
                {
                    b.Property<int>("AdjustmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdjustmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdjustmentId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("HackathonId")
                        .HasColumnType("int")
                        .HasColumnName("HackathonID");

                    b.Property<decimal?>("Points")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("TeamID");

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("AdjustmentId")
                        .HasName("PK__Penaltie__E60DB8B32307C0EE");

                    b.HasIndex("HackathonId");

                    b.HasIndex("TeamId");

                    b.ToTable("PenaltiesBonuses");
                });

            modelBuilder.Entity("Repositories.Models.Prize", b =>
                {
                    b.Property<int>("PrizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PrizeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrizeId"));

                    b.Property<int?>("HackathonId")
                        .HasColumnType("int")
                        .HasColumnName("HackathonID");

                    b.Property<string>("PrizeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrizeType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("Reward")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrizeId")
                        .HasName("PK__Prizes__5C36F4BB25F6A3D0");

                    b.HasIndex("HackathonId");

                    b.ToTable("Prizes");
                });

            modelBuilder.Entity("Repositories.Models.PrizeAllocation", b =>
                {
                    b.Property<int>("AllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AllocationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AllocationId"));

                    b.Property<DateTime?>("AwardedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("PrizeId")
                        .HasColumnType("int")
                        .HasColumnName("PrizeID");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("TeamID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("AllocationId")
                        .HasName("PK__PrizeAll__B3C6D6ABB124F70B");

                    b.HasIndex("PrizeId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("PrizeAllocations");
                });

            modelBuilder.Entity("Repositories.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles__8AFACE3AF3807AC9");

                    b.HasIndex(new[] { "RoleName" }, "UQ__Roles__8A2B6160D48421E9")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Repositories.Models.Score", b =>
                {
                    b.Property<int>("ScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ScoreID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScoreId"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CriteriaId")
                        .HasColumnType("int")
                        .HasColumnName("CriteriaID");

                    b.Property<int?>("JudgeId")
                        .HasColumnType("int")
                        .HasColumnName("JudgeID");

                    b.Property<decimal>("Score1")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("Score");

                    b.Property<DateTime?>("ScoredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("SubmissionId")
                        .HasColumnType("int")
                        .HasColumnName("SubmissionID");

                    b.HasKey("ScoreId")
                        .HasName("PK__Scores__7DD229F11B6F7D35");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("JudgeId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("Repositories.Models.Submission", b =>
                {
                    b.Property<int>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubmissionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubmissionId"));

                    b.Property<string>("DemoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GitHubLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HackathonId")
                        .HasColumnType("int")
                        .HasColumnName("HackathonID");

                    b.Property<string>("ReportLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SubmittedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("TeamID");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("SubmissionId")
                        .HasName("PK__Submissi__449EE1057EB597C1");

                    b.HasIndex("HackathonId");

                    b.HasIndex("TeamId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("Repositories.Models.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TeamID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int")
                        .HasColumnName("ChapterID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("LeaderId")
                        .HasColumnType("int")
                        .HasColumnName("LeaderID");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TeamId")
                        .HasName("PK__Teams__123AE7B9A0616BCD");

                    b.HasIndex("ChapterId");

                    b.HasIndex("LeaderId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Repositories.Models.TeamMember", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("TeamID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("RoleInTeam")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Member");

                    b.HasKey("TeamId", "UserId")
                        .HasName("PK__TeamMemb__C3426B73A96BB544");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMembers", t =>
                        {
                            t.HasTrigger("trg_CheckTeamSize");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Repositories.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCAC23E1D430");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D10534190B6398")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Repositories.Models.AuditLog", b =>
                {
                    b.HasOne("Repositories.Models.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__AuditLogs__UserI__787EE5A0");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repositories.Models.Chapter", b =>
                {
                    b.HasOne("Repositories.Models.User", "Leader")
                        .WithMany("Chapters")
                        .HasForeignKey("LeaderId")
                        .HasConstraintName("FK__Chapters__Leader__3F466844");

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("Repositories.Models.Criterion", b =>
                {
                    b.HasOne("Repositories.Models.Hackathon", "Hackathon")
                        .WithMany("Criteria")
                        .HasForeignKey("HackathonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Criteria__Hackat__5CD6CB2B");

                    b.Navigation("Hackathon");
                });

            modelBuilder.Entity("Repositories.Models.Hackathon", b =>
                {
                    b.HasOne("Repositories.Models.User", "CreatedByNavigation")
                        .WithMany("Hackathons")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__Hackathon__Creat__4CA06362");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("Repositories.Models.HackathonPhase", b =>
                {
                    b.HasOne("Repositories.Models.Hackathon", "Hackathon")
                        .WithMany("HackathonPhases")
                        .HasForeignKey("HackathonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Hackathon__Hacka__4F7CD00D");

                    b.Navigation("Hackathon");
                });

            modelBuilder.Entity("Repositories.Models.MentorAssignment", b =>
                {
                    b.HasOne("Repositories.Models.Chapter", "Chapter")
                        .WithMany("MentorAssignments")
                        .HasForeignKey("ChapterId")
                        .HasConstraintName("FK__MentorAss__Chapt__534D60F1");

                    b.HasOne("Repositories.Models.User", "Mentor")
                        .WithMany("MentorAssignments")
                        .HasForeignKey("MentorId")
                        .HasConstraintName("FK__MentorAss__Mento__52593CB8");

                    b.HasOne("Repositories.Models.Team", "Team")
                        .WithMany("MentorAssignments")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK__MentorAss__TeamI__5441852A");

                    b.Navigation("Chapter");

                    b.Navigation("Mentor");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Repositories.Models.Notification", b =>
                {
                    b.HasOne("Repositories.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Notificat__UserI__73BA3083");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repositories.Models.PenaltiesBonuse", b =>
                {
                    b.HasOne("Repositories.Models.Hackathon", "Hackathon")
                        .WithMany("PenaltiesBonuses")
                        .HasForeignKey("HackathonId")
                        .HasConstraintName("FK__Penalties__Hacka__66603565");

                    b.HasOne("Repositories.Models.Team", "Team")
                        .WithMany("PenaltiesBonuses")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK__Penalties__TeamI__656C112C");

                    b.Navigation("Hackathon");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Repositories.Models.Prize", b =>
                {
                    b.HasOne("Repositories.Models.Hackathon", "Hackathon")
                        .WithMany("Prizes")
                        .HasForeignKey("HackathonId")
                        .HasConstraintName("FK__Prizes__Hackatho__6B24EA82");

                    b.Navigation("Hackathon");
                });

            modelBuilder.Entity("Repositories.Models.PrizeAllocation", b =>
                {
                    b.HasOne("Repositories.Models.Prize", "Prize")
                        .WithMany("PrizeAllocations")
                        .HasForeignKey("PrizeId")
                        .HasConstraintName("FK__PrizeAllo__Prize__6E01572D");

                    b.HasOne("Repositories.Models.Team", "Team")
                        .WithMany("PrizeAllocations")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK__PrizeAllo__TeamI__6EF57B66");

                    b.HasOne("Repositories.Models.User", "User")
                        .WithMany("PrizeAllocations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__PrizeAllo__UserI__6FE99F9F");

                    b.Navigation("Prize");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repositories.Models.Score", b =>
                {
                    b.HasOne("Repositories.Models.Criterion", "Criteria")
                        .WithMany("Scores")
                        .HasForeignKey("CriteriaId")
                        .HasConstraintName("FK__Scores__Criteria__619B8048");

                    b.HasOne("Repositories.Models.User", "Judge")
                        .WithMany("Scores")
                        .HasForeignKey("JudgeId")
                        .HasConstraintName("FK__Scores__JudgeID__60A75C0F");

                    b.HasOne("Repositories.Models.Submission", "Submission")
                        .WithMany("Scores")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Scores__Submissi__5FB337D6");

                    b.Navigation("Criteria");

                    b.Navigation("Judge");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("Repositories.Models.Submission", b =>
                {
                    b.HasOne("Repositories.Models.Hackathon", "Hackathon")
                        .WithMany("Submissions")
                        .HasForeignKey("HackathonId")
                        .HasConstraintName("FK__Submissio__Hacka__59063A47");

                    b.HasOne("Repositories.Models.Team", "Team")
                        .WithMany("Submissions")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK__Submissio__TeamI__5812160E");

                    b.Navigation("Hackathon");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Repositories.Models.Team", b =>
                {
                    b.HasOne("Repositories.Models.Chapter", "Chapter")
                        .WithMany("Teams")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Teams__ChapterID__4316F928");

                    b.HasOne("Repositories.Models.User", "Leader")
                        .WithMany("Teams")
                        .HasForeignKey("LeaderId")
                        .HasConstraintName("FK__Teams__LeaderID__440B1D61");

                    b.Navigation("Chapter");

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("Repositories.Models.TeamMember", b =>
                {
                    b.HasOne("Repositories.Models.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__TeamMembe__TeamI__47DBAE45");

                    b.HasOne("Repositories.Models.User", "User")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__TeamMembe__UserI__48CFD27E");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repositories.Models.User", b =>
                {
                    b.HasOne("Repositories.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__Users__RoleID__3B75D760");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Repositories.Models.Chapter", b =>
                {
                    b.Navigation("MentorAssignments");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Repositories.Models.Criterion", b =>
                {
                    b.Navigation("Scores");
                });

            modelBuilder.Entity("Repositories.Models.Hackathon", b =>
                {
                    b.Navigation("Criteria");

                    b.Navigation("HackathonPhases");

                    b.Navigation("PenaltiesBonuses");

                    b.Navigation("Prizes");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("Repositories.Models.Prize", b =>
                {
                    b.Navigation("PrizeAllocations");
                });

            modelBuilder.Entity("Repositories.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Repositories.Models.Submission", b =>
                {
                    b.Navigation("Scores");
                });

            modelBuilder.Entity("Repositories.Models.Team", b =>
                {
                    b.Navigation("MentorAssignments");

                    b.Navigation("PenaltiesBonuses");

                    b.Navigation("PrizeAllocations");

                    b.Navigation("Submissions");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("Repositories.Models.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Chapters");

                    b.Navigation("Hackathons");

                    b.Navigation("MentorAssignments");

                    b.Navigation("Notifications");

                    b.Navigation("PrizeAllocations");

                    b.Navigation("Scores");

                    b.Navigation("TeamMembers");

                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
